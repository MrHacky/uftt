FIND_PACKAGE(MyBoost)
FIND_PACKAGE(OpenSSL)
FIND_PACKAGE(Qt)

SET(USE_INTERNAL_BOOST_ASIO_1_0_0 OFF CACHE BOOL "Use internal copy of boost asio library (version 1.1.0)")
IF(USE_INTERNAL_BOOST_ASIO_1_0_0)
	INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/boost_asio_1_1_0")
ENDIF()

INCLUDE_DIRECTORIES("${BOOST_INCLUDE_DIR}")
LINK_DIRECTORIES("${BOOST_LIBRARY_DIR}")

SET(ENABLE_QT_GUI   ON CACHE BOOL "Build QT Gui")

SUBDIRS(net-asio)
SUBDIRS(gtk-gui)
SUBDIRS(qt-gui)
SUBDIRS(util)
SUBDIRS(network)

SET(BUILD_BENCHES OFF CACHE BOOL "Build benchmarks and tests. (bench directory)")
IF(BUILD_BENCHES)
	SUBDIRS(bench)
ENDIF()

IF(UNIX)
	SUBDIRS(linux)
ENDIF()

SET(BUILDVER_FILE
	"${PROJECT_BINARY_DIR}/BuildVersion.h"
)

INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}")

SET(BVERMAJOR "0" CACHE STRING "Major version")
SET(BVERMINOR "0" CACHE STRING "Minor version")
SET(BVERPATCH "0" CACHE STRING "Patch version")
SET(BVEREXTRA "" CACHE STRING "Extra version id")

file(WRITE "${BUILDVER_FILE}" "// generated version file\n")
file(APPEND "${BUILDVER_FILE}" "#define VERSION_MAJOR_STRING \"${BVERMAJOR}\"\n")
file(APPEND "${BUILDVER_FILE}" "#define VERSION_MINOR_STRING \"${BVERMINOR}\"\n")
file(APPEND "${BUILDVER_FILE}" "#define VERSION_PATCH_STRING \"${BVERPATCH}\"\n")
IF(BVEREXTRA)
	file(APPEND "${BUILDVER_FILE}" "#define BUILD_STRING_EXTRA \"${BVEREXTRA}\"\n")
ENDIF()

SET(UFTT_SOURCES
	Main.cpp

	Types.h
	Globals.h
	BuildString.h
	UFTTCore.h            UFTTCore.cpp
	UFTTGui.h             UFTTGui.cpp
	UFTTSettings.h        UFTTSettings.cpp
	UFTTStatus.h          #UFTTStatus.cpp
	AutoUpdate.h          AutoUpdate.cpp
	Platform.h            Platform.cpp
)

SET(UFTT_LIBRARIES
	uftt-network
	lib-net-asio
	lib-util
)

IF(UNIX)
	set(UFTT_LIBRARIES ${UFTT_LIBRARIES} lib-uftt-linux)
ENDIF()

ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/BuildStringMacros.cpp"
	COMMAND "${CMAKE_COMMAND}"
	ARGS -E copy "${CMAKE_CURRENT_SOURCE_DIR}/BuildStringMacros.cpp" "${CMAKE_CURRENT_BINARY_DIR}/BuildStringMacros.cpp"
	COMMENT "VersionTarget"
	DEPENDS ${UFTT_SOURCES} ${UFTT_LIBRARIES}
	)

if(OPENSSL_FOUND)
	add_definitions("-DUSE_OPENSSL")
	INCLUDE_DIRECTORIES("${OPENSSL_INCLUDE_DIR}")
	SET(UFTT_LIBRARIES ${UFTT_LIBRARIES} ${OPENSSL_LIBRARY})
endif()


SET(EXECUTABLE_TARGETS "")

IF(ENABLE_QT_GUI)
	SET(UFTT_QT_LIBRARIES uftt-qt)
	SET(EXECUTABLE_TARGETS ${EXECUTABLE_TARGETS} uftt)

	ADD_EXECUTABLE(uftt ${UFTT_SOURCES} qt-gui/Icons/icon.rc "${CMAKE_CURRENT_BINARY_DIR}/BuildStringMacros.cpp")

	IF(MSVC)
		SET_TARGET_PROPERTIES(uftt PROPERTIES
			LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS"
		)
	ENDIF()
	
	SET_TARGET_PROPERTIES(uftt PROPERTIES COMPILE_DEFINITIONS ENABLE_QT_GUI)

	TARGET_LINK_LIBRARIES(uftt
		${UFTT_LIBRARIES}
		${UFTT_QT_LIBRARIES}
		${BOOST_SYSTEM_LIBRARY}
		${BOOST_THREAD_LIBRARY}
		${BOOST_SIGNALS_LIBRARY}
		${BOOST_DATETIME_LIBRARY}
		${BOOST_FILESYSTEM_LIBRARY}
		${BOOST_SERIALIZATION_LIBRARY}
	)
ENDIF()

IF(ENABLE_GTK_GUI)
	SET(UFTT_GTK_LIBRARIES uftt-gtk)
	SET(EXECUTABLE_TARGETS ${EXECUTABLE_TARGETS} guftt)

	ADD_EXECUTABLE(guftt ${UFTT_SOURCES} qt-gui/Icons/icon.rc "${CMAKE_CURRENT_BINARY_DIR}/BuildStringMacros.cpp")

	IF(MSVC)
		SET_TARGET_PROPERTIES(guftt PROPERTIES
			LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS"
		)
	ENDIF()
	
	SET_TARGET_PROPERTIES(guftt PROPERTIES COMPILE_DEFINITIONS ENABLE_GTK_GUI)

	TARGET_LINK_LIBRARIES(guftt
		${UFTT_LIBRARIES}
		${UFTT_GTK_LIBRARIES}
		${BOOST_SYSTEM_LIBRARY}
		${BOOST_THREAD_LIBRARY}
		${BOOST_SIGNALS_LIBRARY}
		${BOOST_DATETIME_LIBRARY}
		${BOOST_FILESYSTEM_LIBRARY}
		${BOOST_SERIALIZATION_LIBRARY}
	)
ENDIF()

IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
	SET(CPACK_GENERATOR "DEB" "RPM")

	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Ultimate File Transfer Tool")
	SET(CPACK_PACKAGE_VENDOR "uftt")
	SET(CPACK_PACKAGE_NAME "uftt")
	SET(CPACK_PACKAGE_CONTACT "simon.sasburg@gmail.com")
	SET(CPACK_PACKAGE_VERSION_MAJOR "0")
	SET(CPACK_PACKAGE_VERSION_MINOR "1")
	SET(CPACK_PACKAGE_VERSION_PATCH "${BVERPATCH}")
	#SET(CPACK_PACKAGE_INSTALL_DIRECTORY "uftt ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}")
	SET(CPACK_SOURCE_PACKAGE_FILE_NAME "uftt-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
	SET(CPACK_PACKAGE_EXECUTABLES "uftt" "UFTT Executable")

	SET(CPACK_RPM_PACKAGE_ARCHITECTURE ${CURRENT_ARCHITECTURE})
	SET(CPACK_RPM_PACKAGE_LICENSE GLPV2)

	SET(CPACK_DEBIAN_PACKAGE_DEPENDS
		#"libc6, libfontconfig1, libfreetype6, libgcc1, libice6, libpng12-0, libqt4-core, libqt4-gui, libsm6, libssl0.9.8, libstdc++6, libx11-6, libxcursor1, libxext6, libxi6, libxinerama1, libxrandr2, libxrender1, zlib1g"
		"libc6, libgcc1, libstdc++6, libqt4-gui >= (4.4.0), libssl0.9.8"
		#old:	"libc6 (>= 2.3.1-6), libgcc1 (>= 1:3.4.2-12)"
	)

	SET(CPACK_RPM_PACKAGE_REQUIRES
		"glibc, libgcc, libstdc++6, libqt4 >= 4.4.0, libopenssl0_9_8"
	)

	IF(UNIX)
		SET(CPACK_STRIP_FILES "bin/uftt")
		SET(CMAKE_INSTALL_PREFIX "/usr/local")
	ENDIF()

	# List executables
	INCLUDE(CPack)
ENDIF()

INSTALL(TARGETS uftt
	RUNTIME DESTINATION bin
)
