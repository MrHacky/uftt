IF(LINK_STATIC_RUNTIME)
	PROJECT(UFTT-static)
ELSE(LINK_STATIC_RUNTIME)
	PROJECT(UFTT)
ENDIF(LINK_STATIC_RUNTIME)

cmake_minimum_required(VERSION 2.4.0)

IF(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW)
	cmake_policy(SET CMP0005 OLD)
ENDIF(COMMAND cmake_policy)

# Treat warnings as errors cmake option (todo: support this on gcc/other compilers)
SET(TREAT_WARNINGS_AS_ERRORS OFF CACHE BOOL "Treat warnings as errors")

IF(MSVC)
	SET(LINK_STATIC_RUNTIME OFF CACHE BOOL "Link statically against C++ runtime")
	ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS")

	IF(TREAT_WARNINGS_AS_ERRORS)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX")
	ENDIF(TREAT_WARNINGS_AS_ERRORS)

	# Extra speed optimisation options
	IF(FALSE)
		SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Oi /Ot /Oy /GL /GS- /arch:SSE2 /fp:fast")
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Oi /Ot /Oy /GL /GS- /arch:SSE2 /fp:fast")
		SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /OPT:REF /OPT:ICF /ltcg")
		SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /OPT:REF /OPT:ICF /ltcg")
	ENDIF(FALSE)

	#SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:LIBCMTD")
	SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:libcpmt")

	IF(LINK_STATIC_RUNTIME)
		STRING(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
		STRING(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

		STRING(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
		STRING(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
		ADD_DEFINITIONS("-DLINK_STATIC_RUNTIME")
		#SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:msvcrt /NODEFAULTLIB:msvcrtd")
	ENDIF(LINK_STATIC_RUNTIME)
ENDIF(MSVC)

IF(CMAKE_COMPILER_IS_GNUCXX)
	IF(TREAT_WARNINGS_AS_ERRORS)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
	ENDIF(TREAT_WARNINGS_AS_ERRORS)
ENDIF(CMAKE_COMPILER_IS_GNUCXX )

IF(MINGW)
	SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -mwindows")
ENDIF(MINGW)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/")

SUBDIRS(src)
