* Major features ordered by priority.
- Fix bugs
- implement share announcement via reliable transport (tcp), and peer discovery via broadcasts (udp)
- task management

* Long term, unordered, minor, and subtask features
- fix progress indicators for resumed downloads
- automatically resume failed downloads when the connection is restored
- uniquely identify (parts of) shares somehow
- allow downloading parts of the same share from different sources
- allow simultanious downloading via broadcast link
- optimize receiver with buffer queue
- allow management of local shares
- remember local shares
- show share name for upload tasks
- allow custom broadcast ip's
- allow custom broadcast dns names
- clean up connections when they are done
- allow disabling of autoupdate at compile time (and do so by default in linux?)
- implement console detaching/attaching for linux
- allow ipx-semi connections in architecture, and gui, and make it not too haxxy
- implement udp hole punching through firewall for local link
- use configurable temp dir for compressing & downloading updates
- implement remote browsing
- clean up http request class (wait for boost implementation? :-p)
- add ability to use mirrors to http request class
- and use it for web updates, and possibly global peer discovery
- implement automatic test suite for stuff
- check more things in --runcheck
- show progress for web update tasks
- make size-optimized bootstrapper executable (no gui etc)
- make bootstrapper universal (detect os, web version)
- make uftt.dat location changable after initial startup
- make autoupdate dialog
- have doubleclick on share popup download dialog asking where to save
- find uftt.dat in executable directory (again)
- implement debian/ubuntu .deb autoupdate (again)

* Already completed features.
- [DONE] implement udp hole punching via central web server
- [DONE] support ipv6 connections/discovery, especially link-local
- [DONE] udp connectivity
- [DONE] allow sharing non-self autoupdates
- [DONE] nat hole punching
- [DONE] monitor available interfaces to react to changes
- [DONE] abstract backend interface, so you can easily add different ones (ipx,ipvx)
- [DONE] make http web update backend
- [DONE] ipv6 connectivity
- [DONE] resuming of aborted downloads
- [DONE] implement partial requests
- [DONE] implement hash requests (limited)
- [DONE] make GUI look nice in non win98-classic themes
- [DONE] show total size, speed, and remaining time estimation
- [DONE] implement peer discovery via central web server (heliohost)
- [DONE] have doubleclick on completed download task open it in explorer
- [DONE] automatically place uftt.dat in user application settings on first startup
- [DONE] fix upload task for autoupdate (p2p)
- [DONE] fix download task for autoupdate (p2p)
- [DONE] use future-proof protocols (i really hope so!)
- [DONE] add option to automatically check for (http) updates every day, week, or month
- [DONE] implement autoupdate via http (heliohost)
- [DONE] show upload tasks in task list
- [DONE] make nice application icons
- [DONE] process --delete asynchronously
- [DONE] read 'exefile' asynchronously
- [DONE] optimise sender with buffer queue
- [DONE] refactor out byte value to string conversion to utulity header
- [DONE] fix opening mounted iso's
- [DONE] make ufft work in linux
- [DONE] refactor console, to always show in debug mode, and in release mode when we have something to say
- [DONE] show task list with download status
- [DONE] show download tasks in task list

